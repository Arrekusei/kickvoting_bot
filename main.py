from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import os
import logging
import json
import asyncio
from flask import Flask, request

# -------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# -------------------
logging.basicConfig(level=logging.DEBUG)

# -------------------
# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# -------------------
application = ApplicationBuilder().token(os.getenv("TOKEN")).build()

# -------------------
# üóÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
# -------------------
VOTES_FILE = 'votes.json'

def load_votes():
    if not os.path.exists(VOTES_FILE):
        return {"current_vote": None}
    with open(VOTES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_votes(votes):
    with open(VOTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(votes, f, indent=4)

# -------------------
# üó≥ –ö–æ–º–∞–Ω–¥–∞ /vote ‚Äî –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫
# -------------------
async def vote_command(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫–æ–π –≤–∞—à –≤—ã–±–æ—Ä?", reply_markup=reply_markup)

# -------------------
# üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
# -------------------
async def handle_vote(update: Update, context):
    query = update.callback_query
    data = query.data
    user_id = str(query.from_user.id)

    votes = load_votes()
    current_vote = votes["current_vote"]
    if not current_vote:
        await query.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
    current_vote["voters"][user_id] = data
    save_votes(votes)

    # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {data}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await query.message.reply_text(f"–í–∞—à –≤—ã–±–æ—Ä: {data}")

# -------------------
# üõë –ö–æ–º–∞–Ω–¥–∞ /end_vote ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
# -------------------
async def end_vote_command(update: Update, context):
    votes = load_votes()
    current_vote = votes["current_vote"]
    if not current_vote:
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ.")
        return

    # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {}
    for vote in current_vote["voters"].values():
        results[vote] = results.get(vote, 0) + 1

    result_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
    for option, count in results.items():
        result_text += f"{option}: {count} –≥–æ–ª–æ—Å(–∞/–æ–≤)\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç
    await update.message.reply_text(result_text)

    # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    votes["current_vote"] = None
    save_votes(votes)

    logging.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# -------------------
# üìä –ö–æ–º–∞–Ω–¥–∞ /results ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
# -------------------
async def results_command(update: Update, context):
    votes = load_votes()
    current_vote = votes["current_vote"]
    if not current_vote or not current_vote["voters"]:
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.")
        return

    # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {}
    for vote in current_vote["voters"].values():
        results[vote] = results.get(vote, 0) + 1

    result_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
    for option, count in results.items():
        result_text += f"{option}: {count} –≥–æ–ª–æ—Å(–∞/–æ–≤)\n"

    await update.message.reply_text(result_text)
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

# -------------------
# üöÄ –ö–æ–º–∞–Ω–¥–∞ /test ‚Äî –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------
async def test_command(update: Update, context):
    await update.message.reply_text("–ë–æ—Ç –∂–∏–≤!")

# -------------------
# üß™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# -------------------
application.add_handler(CommandHandler('test', test_command))
application.add_handler(CommandHandler('vote', vote_command))
application.add_handler(CommandHandler('end_vote', end_vote_command))
application.add_handler(CommandHandler('results', results_command))
application.add_handler(CallbackQueryHandler(handle_vote))

# -------------------
# üåê Flask App & Webhook
# -------------------
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    from telegram.ext import Update
    data = request.get_json()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}")
    update = Update.de_json(data, application.bot)
    asyncio.run(application.update_queue.put(update))
    return 'ok'

@app.route('/')
def index():
    return "Bot is running!"

# -------------------
# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
# -------------------
if __name__ == '__main__':
    PORT = int(os.environ.get("PORT", 80))
    app.run(host='0.0.0.0', port=PORT)
